// =======================================
// Prisma schema
// =======================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PushTokenType {
  expo
  fcm
}

enum Platform {
  android
  ios
  web
}

model User {
  id                    Int        @id @default(autoincrement())
  userName              String     @unique
  email                 String     @unique
  password              String
  createdAt             DateTime   @default(now())
  gender                String?
  avatarUrl             String?
  age                   Int?
  description           String?
  isVerified            Boolean    @default(false)
  verificationToken     String?
  verificationExpires   DateTime?

  // --- Preferencje powiadomień / lokalizacje użytkownika ---
  notificationRadiusKm  Int        @default(30)     // promień powiadomień w km
  customNotifyEnabled   Boolean    @default(false)  // czy używać własnej (ręcznie podanej) lokalizacji
  customNotifyLat       Float?                      // lat dla custom location
  customNotifyLng       Float?                      // lng dla custom location
  lastDeviceLat         Float?                      // ostatnia lat z GPS urządzenia
  lastDeviceLng         Float?                      // ostatnia lng z GPS urządzenia

  // --- Relacje ---
  eventsCreated         Event[]    @relation("EventCreator")
  userInterests         UserInterest[]
  pushTokens            PushToken[]
  sentRequests          Friendship[] @relation("Requester")
  receivedRequests      Friendship[] @relation("Recipient")
  Notification          Notification[]
  participatedEvents    EventParticipant[]

  @@index([customNotifyLat, customNotifyLng])
  @@index([lastDeviceLat, lastDeviceLng])
}

model Event {
  id                 Int       @id @default(autoincrement())
  location           String
  address            String
  startDate          DateTime
  endDate            DateTime
  activity           String
  maxParticipants    Int
  genderBalance      Boolean   @default(false)
  createdAt          DateTime  @default(now())
  minAge             Int?
  maxAge             Int?
  latitude           Float?
  longitude          Float?

  // --- Snapshot lokalizacji twórcy w momencie tworzenia wydarzenia ---
  creatorLatAtCreate Float?
  creatorLngAtCreate Float?

  // --- Relacje ---
  creatorId          Int
  creator            User      @relation("EventCreator", fields: [creatorId], references: [id])
  eventParticipants  EventParticipant[]

  @@index([latitude, longitude])
  @@index([creatorLatAtCreate, creatorLngAtCreate])
}

model EventParticipant {
  id       Int      @id @default(autoincrement())
  userId   Int
  eventId  Int
  joinedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model UserInterest {
  id       Int    @id @default(autoincrement())
  userId   Int
  activity String

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PushToken {
  id         Int           @id @default(autoincrement())
  userId     Int
  token      String
  tokenType  PushTokenType @default(expo) // domyślnie 'expo'
  platform   Platform?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, token])  // wiele urządzeń per user, bez duplikatu tokenu
  @@index([userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId Int
  recipientId Int
  status      String
  createdAt   DateTime @default(now())

  requester User @relation("Requester", fields: [requesterId], references: [id])
  recipient User @relation("Recipient", fields: [recipientId], references: [id])

  @@index([requesterId])
  @@index([recipientId])
}
